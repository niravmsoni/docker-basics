# Persisting Data
Intro:
Docker creates the environment for a container, which includes the filesystem. The C: drive on Windows containers and the root path on Linux containers are composed of multiple sources - the container image, volume mounts and the container's writeable layer.
Image layers are read-only so they can be shared between images and containers. The writeable layer lets each container modify files without affecting other containers. But the writeable layer has the same lifespan as the container - remove the container and you'll lose all the data it wrote.
For stateful apps you can use volumes and mounts to separate the data lifecycle from the container lifecycle.
Most of containers are stateless. If the container needs an update, it needs to be removed and run again with newer configuration.
What if we want some sort of persistence with containers? Meaning when a new container comes up, it should be able to access data that the previous container wrote.

That's when volume mapping comes into picture.

When we create a container, it sets up filesystem for us.
For Windows containers,
    We get C:/ drive
For Linux,
    We get root directory

Any data that's written inside the container has the same lifecycle as the container itself.

Commands:
========
docker logs 04_signup-web_1

docker exec 04_signup-web_1 powershell ls C:\logs

docker exec 04_signup-web_1 powershell ls C:\web-app
========

We can see that with the 2nd command, we're able to see Log file that all our application logs go and then with 3rd command, we're able to see all files under our web-app
Docker brings all of these layers together and runs it in a virtual environment.

Volumes
    Are equivalent to USB drives or external HDDs that can be attached to containers and they live outside the life cycle of the container.

Specifying volumes in the Docker image
We've already used volume mounts for containers, and there's another way to use them - as Docker Volume objects which you can specify in the Dockerfile.

Volumes live independently of the container they're attached to, so when you remove a container the volume still exists and you can access the files which the container wrote to the volume.

This new Dockerfile for the web app uses a volume for the log directory.

DockerFile
============
# escape=`
FROM mcr.microsoft.com/windows/nanoserver:1809 AS logmonitor
ARG LOGMONITOR_VERSION="v1.1"
ADD https://github.com/microsoft/windows-container-tools/releases/download/${LOGMONITOR_VERSION}/LogMonitor.exe .

FROM mcr.microsoft.com/windows/nanoserver:1809 AS servicemonitor
ARG SERVICEMONITOR_VERSION="2.0.1.10"
ADD https://dotnetbinaries.blob.core.windows.net/servicemonitor/${SERVICEMONITOR_VERSION}/ServiceMonitor.exe .

# app
FROM mcr.microsoft.com/dotnet/framework/sdk:4.8 AS builder

WORKDIR C:\src
COPY src\SignUp.Web.sln .
COPY src\SignUp.Core\SignUp.Core.csproj .\SignUp.Core\
COPY src\SignUp.Entities\SignUp.Entities.csproj .\SignUp.Entities\
COPY src\SignUp.Messaging\SignUp.Messaging.csproj .\SignUp.Messaging\
COPY src\SignUp.Model\SignUp.Model.csproj .\SignUp.Model\
COPY src\SignUp.Web\SignUp.Web.csproj .\SignUp.Web\
COPY src\SignUp.Model\packages.config .\SignUp.Model\
COPY src\SignUp.Web\packages.config .\SignUp.Web\
RUN nuget restore SignUp.Web.sln

COPY src C:\src
RUN msbuild SignUp.Web\SignUp.Web.csproj /p:OutputPath=c:\out /p:Configuration=Release

# app image
FROM mcr.microsoft.com/dotnet/framework/aspnet:4.8
SHELL ["powershell", "-Command", "$ErrorActionPreference = 'Stop';"]

ENV APP_ROOT=C:\web-app `
    LOGS_ROOT=C:\logs
    
ENTRYPOINT C:\LogMonitor.exe C:\ServiceMonitor.exe w3svc

WORKDIR ${LOGS_ROOT}
WORKDIR ${APP_ROOT}
RUN New-WebApplication -Name 'app' -Site 'Default Web Site' -PhysicalPath $env:APP_ROOT

HEALTHCHECK --interval=5s `
 CMD powershell -command `
    try { `
     $response = Invoke-WebRequest http://localhost/app/SignUp -UseBasicParsing; `
     if ($response.StatusCode -eq 200) { return 0} `
     else {return 1}; `
    } catch { return 1 }

VOLUME C:\logs

COPY --from=logmonitor /LogMonitor.exe /LogMonitor.exe
COPY --from=servicemonitor /ServiceMonitor.exe /ServiceMonitor.exe
COPY --from=builder C:\out\_PublishedWebsites\SignUp.Web ${APP_ROOT} 

COPY docker\04-06-persistent-state\signup-web\Web.config ${APP_ROOT}
COPY docker\04-06-persistent-state\signup-web\config\*.config ${APP_ROOT}\config\
COPY docker\04-06-persistent-state\signup-web\LogMonitorConfig.json C:\LogMonitor\
============

Build and run the new web container and check the configuration:
===================================
docker-compose -f app/04/web.yml -f app/04/04-06/signup-web.yml build signup-web

docker-compose -f app/04/web.yml -f app/04/04-06/signup-web.yml up -d signup-web

docker inspect 04_signup-web_1

docker volume ls
===================================

We see inside DockerFile, there's a VOLUME command.
===========
VOLUME C:logs
===========

With this, docker creates anonymous volumes which are managed by Docker for us.
It'd assign a random name to it(Combination of letters, numbers)
Now, if we run docker inspect command, under Mounts section, we do see volume information coming up
Source of the volume = Physical location on our machine.
Destination of volume is whatever we specify in the VOLUME command.

If we run docker volume ls -> We would see all the volumes that are present

For testing this, we run the application and the logs would then be stored on our physical machine.
Browse to http://localhost:8081/app/SignUp and add some new details to confirm the app still works in the same way.

Check the logs and the physical path of the volume:
=========================
docker logs 04_signup-web_1

docker inspect 04_signup-web_1 -f '{{(index .Mounts 0).Source}}'

$source = $(docker inspect 04_signup-web_1 -f '{{(index .Mounts 0).Source}}')

ls $source

cat "$source\SignUp.log"
=========================
The volume is a local directory - Docker takes care of mounting it into the container.

Removing the container doesn't remove the volume
Volumes can be managed independently of containers. If there's a VOLUME instruction in the Dockerfile then Docker will create a new volume for each container, but it doesn't get removed when the container is removed.

Delete the web container and confirm the volume data is still there:
==========================
docker rm -f 04_signup-web_1

docker volume ls

ls $source
==========================
The log file is still there - this could be a database file or a local cache file.

Using a named volume for containers
These anonymous volumes are useful for making sure data stays around when containers are removed, but you have to find out which volume you want. Instead you can create a named volume with docker volume create or in your Compose spec.

The web container can be configured to write logs to a different location, so we can use an alternative volume:

log4net.config writes to the C:\other-logs directory
LogMonitorConfig.json is configured to read from both log directories
signup-web-2.yml uses the new config files and a named volume

log4net.config
============
<log4net>
  <appender name="RollingLogFileAppender" type="log4net.Appender.RollingFileAppender, log4net">
    <lockingModel type="log4net.Appender.FileAppender+MinimalLock"/>
    <file value="C:\other-logs\SignUp.log"/>
    <appendToFile value="true"/>
    <maxSizeRollBackups value="10"/>
    <maximumFileSize value="20000000"/>
    <rollingStyle value="Size"/>
    <staticLogFileName value="true"/>
    <layout type="log4net.Layout.PatternLayout">
      <conversionPattern value="%date [%-2thread] %-5level - %message%newline"/>
    </layout>
  </appender>
  <logger name="SignUp.Log">
    <level value="DEBUG"/>
    <appender-ref ref="RollingLogFileAppender"/>
  </logger>
</log4net>
============

LogMonitorConfig.json
================
{
    "LogConfig": {
      "sources": [
        {
          "type": "File",
          "directory": "C:\\logs",
          "filter": "SignUp.log",
          "includeSubdirectories": false
        },
        {
          "type": "File",
          "directory": "C:\\other-logs",
          "filter": "SignUp.log",
          "includeSubdirectories": false
        }
      ]
    }
  }
================

signup-web-2.yml
===============
version: "3.8"

services:

  signup-web:
    image: signup-web:04-06
    build:
      dockerfile: docker/04-06-persistent-state/signup-web/Dockerfile
    environment:
      - Metrics:Server:Enabled=true
      - Metrics:Application:Enabled=true
    volumes:
      - type: bind
        source: .\04-06\signup-web-config
        target: C:\web-app\config
      - type: volume
        source: signup-web-logs
        target: C:\other-logs
    
volumes:
  signup-web-logs:
===============
Explanation: 

type: bind
    This is similar to using -v flag. We're mounting contents from local machine into the container. This is as good as taking file from source location and replacing them in the target location inside the container.

type: volume
    This is the source and target mapping.

Running the web container with a named volume
Docker Compose has the same desired-state approach for volumes as for containers. The signup-web-logs volume doesn't exist so Compose will create it when you bring the application up.

Replace the web container with the new configuration:
=================
docker-compose -f app/04/web.yml -f app/04/04-06/signup-web-2.yml up -d signup-web

docker logs 04_signup-web_1

docker exec 04_signup-web_1 powershell ls C:\logs

docker exec 04_signup-web_1 powershell ls C:\other-logs
=================
Compose creates the volume with the default driver - the local disk.

Working with named volumes
Volumes are first-class objects in Docker, you can work with them using the command line.

Look at the configuration of the new volume:
==============
docker volume ls

docker volume inspect 04_signup-web-logs

docker volume inspect 04_signup-web-logs -f '{{.Mountpoint}}'
==============
The local volume driver uses the disk on the Docker server.
Volumes can be:
  1. Disk in local machine
  2. Network storage component
  3. Network File share

Ideally on PROD, we should use something like Network File share etc.

Named volumes can be reused between containers
This is how you persist state between updates. You can remove the original container and the volume remains. Start a new container with the same volume mount and it will load the existing named volume.

Replace the web container and check the filesystem in the replacement:
===================
docker rm -f 04_signup-web_1

docker volume ls

docker-compose -f app/04/web.yml -f app/04/04-06/signup-web-2.yml up -d signup-web

cat "$(docker volume inspect 04_signup-web-logs -f '{{.Mountpoint}}')\SignUp.log"

docker logs 04_signup-web_1
===================
Volumes are still there even after removing container.
The new container sees all the log entries written by the previous container.
We see logs are appended into the file where existing logs were written.


Configuring stateful apps to use volumes
Containers work best for stateless apps because they work well in a dynamic environment - work can be load-balanced between containers easily and containers can come and go without affecting end users.

You can run stateful apps in containers provided your app can be configured to write data files to a specific location. That location can be a named volume or a bind mount on the server. In the next lesson we'll apply that approach to the SQL Server database.