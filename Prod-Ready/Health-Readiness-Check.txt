Intro:

Docker monitors the startup process in the container and if that process ends then the container exits. This is a basic liveness check which doesn't ensure the app is actually working - a web server could still be running but returning 503 responses to every request because it's maxed out.
You can add a healthcheck to container images so Docker tests your app and makes sure it actually is healthy. We'll see some different ways to approach that in this lesson.
The other side of health is a readiness check which confirms your app is actually able to start work. You need that for apps which don't fail gracefully if they can't reach dependencies, and we'll see how to build that logic into the container startup command.

This is an important step to make sure the applications are self-healing.
Docker supports health check with "HEALTHCHECK" command

Updated DockerFile
===================
# escape=`
FROM mcr.microsoft.com/windows/nanoserver:1809 AS logmonitor
ARG LOGMONITOR_VERSION="v1.1"
ADD https://github.com/microsoft/windows-container-tools/releases/download/${LOGMONITOR_VERSION}/LogMonitor.exe .

FROM mcr.microsoft.com/windows/nanoserver:1809 AS servicemonitor
ARG SERVICEMONITOR_VERSION="2.0.1.10"
ADD https://dotnetbinaries.blob.core.windows.net/servicemonitor/${SERVICEMONITOR_VERSION}/ServiceMonitor.exe .

# app
FROM mcr.microsoft.com/dotnet/framework/sdk:4.8 AS builder

WORKDIR C:\src
COPY src\SignUp.Web.sln .
COPY src\SignUp.Core\SignUp.Core.csproj .\SignUp.Core\
COPY src\SignUp.Entities\SignUp.Entities.csproj .\SignUp.Entities\
COPY src\SignUp.Messaging\SignUp.Messaging.csproj .\SignUp.Messaging\
COPY src\SignUp.Model\SignUp.Model.csproj .\SignUp.Model\
COPY src\SignUp.Web\SignUp.Web.csproj .\SignUp.Web\
COPY src\SignUp.Model\packages.config .\SignUp.Model\
COPY src\SignUp.Web\packages.config .\SignUp.Web\
RUN nuget restore SignUp.Web.sln

COPY src C:\src
RUN msbuild SignUp.Web\SignUp.Web.csproj /p:OutputPath=c:\out /p:Configuration=Release

# app image
FROM mcr.microsoft.com/dotnet/framework/aspnet:4.8
SHELL ["powershell", "-Command", "$ErrorActionPreference = 'Stop';"]

ENV APP_ROOT=C:\web-app `
    LOGS_ROOT=C:\logs

ENTRYPOINT C:\LogMonitor.exe C:\ServiceMonitor.exe w3svc

WORKDIR ${LOGS_ROOT}
WORKDIR ${APP_ROOT}
RUN New-WebApplication -Name 'app' -Site 'Default Web Site' -PhysicalPath $env:APP_ROOT

HEALTHCHECK --interval=5s `
 CMD powershell -command `
    try { `
     $response = Invoke-WebRequest http://localhost/app/SignUp -UseBasicParsing; `
     if ($response.StatusCode -eq 200) { return 0} `
     else {return 1}; `
    } catch { return 1 }

COPY --from=logmonitor /LogMonitor.exe /LogMonitor.exe
COPY --from=servicemonitor /ServiceMonitor.exe /ServiceMonitor.exe
COPY --from=builder C:\out\_PublishedWebsites\SignUp.Web ${APP_ROOT} 

COPY docker\04-03-health-readiness-checks\signup-web\Web.config ${APP_ROOT}
COPY docker\04-03-health-readiness-checks\signup-web\config\*.config ${APP_ROOT}\config\
COPY docker\04-03-health-readiness-checks\signup-web\LogMonitorConfig.json C:\LogMonitor\
===================
Explanation:
This Dockerfile for the ASP.NET app adds a HEALTHCHECK instruction. Docker will run the healthcheck command inside the container, and use the exit code to determine the container health - 0 means healthy.

How does healthcheck works?
If docker sees healthcheck command within the dockerFile, it takes a look at the interval(This is how frequently do we want the command to execute).
From the command, we can make a Web-Request to the URL and make sure we return 0 in case of 200OK & 1 for all other status codes

So, every 5 seconds, Docker will make a call to the localhost Signup URL and examine response code.
If StatusCode = 200 > Returns 0(Health check passed)
Else > Return 1(Health check failed)
CATCH(Health check failed)

Looking at docker-compose file:
==============================
version: "3.8"

services:

  signup-web:
    image: signup-web:04-03
    build:
      dockerfile: docker/04-03-health-readiness-checks/signup-web/Dockerfile
==============================

NEW - We can join multiple docker-compose files. For checking the output, we can pass the config flag like this.
====================================================
docker-compose -f app/04/web.yml -f app/04/04-03/signup-web.yml config
====================================================
How it works?
When we join multiple docker compose files together, the later files(After the first ones) act as an OVERRIDE to the earlier files.

Here, since its' a config command, we can see that the override has happened.
For signup-web container, it has picked the contents(build and image) from the overridden file.

Override files are a great way to manage your app defintions with Compose, so they don't get bloated. You can separate build details from runtime config, and have different settings for different environments.

Build and run the updated web app with the healthcheck. Executing the command now:
=========================
docker-compose -f app/04/web.yml -f app/04/04-03/signup-web.yml build signup-web

docker-compose -f app/04/web.yml -f app/04/04-03/signup-web.yml up -d

docker ps
=========================
You'll see the web container has a different status from the others - health: starting
If we execute docker ps after sometime, we see status turned to "status(healthy)"

For checking status of health checks, we could execute the "inspect" command as below:
======================
"docker inspect 04_signup-web_1"
======================
We see Health item with below contents:
    1. Status = Healthy/Unhealthy
    2. FailingStreak = Concurrently failed health checks. By default its 3(Before flagging container as unhealthy).

For using built-in HealthChecks from Docker, we need to be careful what we use.
For Windows,
    We could use Invoke-WebRequest. It requires Powershell in container image so it isn't suitable for .NET Core apps which could run on NanoServer or Linux.
For Linux,
    We could use curl but it also isn't present in all base images. For ex: Alpine based images do not have Curl installed.

So, ideally a better way is for us to write our own HealthCheck code rather than rely on built-in frameworks to do the job for us.
By doing so, we're making it cross-platform and removing the need for additional tools to be rpesent in container image.

Updated DockerFile(Reference Data API - .NET Core)
=============
# container utilities
FROM mcr.microsoft.com/dotnet/core/sdk:3.1 as utilities

WORKDIR /src
COPY src/Utilities.HttpCheck/Utilities.HttpCheck.csproj ./Utilities.HttpCheck/

WORKDIR /src/Utilities.HttpCheck
RUN dotnet restore

COPY src /src
RUN dotnet publish -c Release -o /out Utilities.HttpCheck.csproj

# app build
FROM mcr.microsoft.com/dotnet/core/sdk:3.1 as builder

WORKDIR /src
COPY src/SignUp.Entities/SignUp.Entities.csproj ./SignUp.Entities/
COPY src/SignUp.Api.ReferenceData/SignUp.Api.ReferenceData.csproj ./SignUp.Api.ReferenceData/

WORKDIR /src/SignUp.Api.ReferenceData
RUN dotnet restore

COPY src /src
RUN dotnet publish -c Release -o /out SignUp.Api.ReferenceData.csproj

# app image
FROM mcr.microsoft.com/dotnet/core/aspnet:3.1

EXPOSE 80
WORKDIR /app
ENTRYPOINT ["dotnet", "/app/SignUp.Api.ReferenceData.dll"]

ENV HttpCheck:TargetUrl="http://localhost/api/ready" \
    HttpCheck:Timeout="200"

HEALTHCHECK --interval=5s CMD ["dotnet", "/app/Utilities.HttpCheck.dll"]

COPY --from=utilities /out/ .
COPY --from=builder /out/ .
COPY ./docker/04-03-health-readiness-checks/reference-data-api/appsettings.json .
=============
Explanation:
Multi-stage build with 
    first stage as health check.
    Second stage as application

Here, within HEALTHCHECK, we see interval as 5 seconds and it will simply call the HealthCheck .dll. Meaning now, the .NET Code is responsible for doing health-checks and not the Invoke-WebRequest or CURL.

So, adding this new contents in a newer docker-compose file & we will override the same configurations again.
Commands
========
docker-compose -f app/04/web.yml -f app/04/04-03/reference-data-api.yml config

docker-compose -f app/04/web.yml -f app/04/04-03/reference-data-api.yml build reference-data-api

docker-compose -f app/04/web.yml -f app/04/04-03/reference-data-api.yml up -d reference-data-api
========
Health checks need to be light-weight. This is beacuse they will be frequently executed by the platform.

We could again check the health status.
===========
docker ps

docker logs 04_reference-data-api_1

docker inspect 04_reference-data-api_1
===========

Readiness Checks(Optional)
This is to ensure our containers FAIL FAST If they can't do any work.
Healthchecks make sure your app is working correctly, and some apps will also need a readiness check to make sure they are able to start work.
Apps might be built with the assumption that all dependencies are available, and not be resilient to failure. 
That's where you need a readiness check because you don't want a container which looks healthy but where the app is unable to do anything.

Use-case:
If we have a code that listens to a queue. If the connection to queue fails, code throws exception and sits idle and does not exit.

Docker doesn't have built-in support for readiness, but you can add a check in the startup command. The new Dockerfile for the message handler does that.
Updating the DockerFile with new Readiness check
=====================
# escape=`

# container utilities
FROM mcr.microsoft.com/dotnet/core/sdk:3.1 as utilities

WORKDIR /src
COPY src/Utilities.MessageQueueCheck/Utilities.MessageQueueCheck.csproj ./Utilities.MessageQueueCheck/

WORKDIR /src/Utilities.MessageQueueCheck
RUN dotnet restore

COPY src /src
RUN dotnet publish -r win-x64 -p:PublishSingleFile=true --self-contained true -c Release -o /out Utilities.MessageQueueCheck.csproj

# app build
FROM mcr.microsoft.com/dotnet/framework/sdk:4.8 AS builder

WORKDIR C:\src
COPY src\SignUp.sln .
COPY src\SignUp.Core\SignUp.Core.csproj .\SignUp.Core\
COPY src\SignUp.Entities\SignUp.Entities.csproj .\SignUp.Entities\
COPY src\SignUp.Messaging\SignUp.Messaging.csproj .\SignUp.Messaging\
COPY src\SignUp.Model\SignUp.Model.csproj .\SignUp.Model\
COPY src\SignUp.Model\packages.config .\SignUp.Model\
COPY src\SignUp.MessageHandlers.SaveProspect\SignUp.MessageHandlers.SaveProspect.csproj .\SignUp.MessageHandlers.SaveProspect\
COPY src\SignUp.MessageHandlers.SaveProspect\packages.config .\SignUp.MessageHandlers.SaveProspect\
RUN nuget restore .\SignUp.sln

COPY src C:\src
RUN msbuild SignUp.MessageHandlers.SaveProspect\SignUp.MessageHandlers.SaveProspect.csproj /p:OutputPath=c:\out\save-prospect\SaveProspectHandler

# app image
FROM mcr.microsoft.com/dotnet/framework/runtime:4.8

ENV APP_ROOT=C:\save-prospect-handler

WORKDIR ${APP_ROOT}
CMD .\Utilities.MessageQueueCheck.exe && .\SignUp.MessageHandlers.SaveProspect.exe

COPY --from=utilities C:\out\ .
COPY --from=builder C:\out\save-prospect\SaveProspectHandler .
COPY docker\04-03-health-readiness-checks\save-handler\App.config ${APP_ROOT}\SignUp.MessageHandlers.SaveProspect.exe.config
COPY docker\04-03-health-readiness-checks\save-handler\config\*.config ${APP_ROOT}\config\
=====================
Explanation:
Here, we added a new step "Utilities.MessageQueueCheck.csproj"

And under the command, we specified this:
"CMD .\Utilities.MessageQueueCheck.exe && .\SignUp.MessageHandlers.SaveProspect.exe"
Meaning -> If the MessageQueueCheck.exe returns - 0, all OK. Else there's a problem and the container won't start.

Repeat the test and you'll see that the handler exits if it can't access the message queue on startup.

See how the handler behaves with the readiness check:

Commands:
===========
docker container logs 04_signup-save-handler_1

docker container stop 04_message-queue_1

docker container restart 04_signup-save-handler_1

docker ps -a

docker container logs 04_signup-save-handler_1
===========

It's counter-intuitive but you want containers to fail fast if they can't do any work.