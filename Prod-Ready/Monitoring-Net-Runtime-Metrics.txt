Intro:
Containerized applications give you new opportunities for monitoring. 
You export metrics from each container, collect them centrally and show your whole application health in a dashboard.
Runtime metrics tell you how hard .NET is working to run your app. 
Windows Server Core containers store Performance Counters(https://github.com/dockersamples/aspnet-monitoring) in the usual way and you can export IIS and .NET Framework Performance Counters 
- but it's better to add metrics to your application source code.

We'll do that using Prometheus(https://prometheus.io/) which is the most popular metrics framework. Prometheus collects metrics from your apps, and your apps expose the statistics which matter to them in an HTTP endpoint.
Prometheus - CNCF project
It collects key metrics for .NET Framework and .NET Core apps.
We get an HTTP endpoint that we can call to check the metrics related to CPU etc .NET Core/.NET Framework runtimes.

Type of metrics
Gauge = Records useful information of application such as version etc.

How to integrate it?
Need this NuGet package - https://github.com/prometheus-net/prometheus-net
Configure it in appSettings.json
{
  "MessageQueue": {
    "Url": "nats://message-queue:4222"
  },
  "Database": {
    "MaxRetryCount": "3",
    "MaxDelaySeconds": "10"
  },
  "Metrics": {
    "Server": {
      "Enabled" : false,
      "Port" : 80
    },
    "Application": {      
      "Enabled" : false
    }
  }
}

C# Code to start metric server:
https://github.com/sixeyed/docker4.net/blob/master/src/SignUp.MessageHandlers.SaveProspect/Program.cs

In a separate compose file, setting environment variable to turn metrics on.
===================
version: '3.7'

services:

  signup-save-handler:
    image: save-handler:04-03
    environment:
      - Metrics:Server:Enabled=true
    ports:
      - "8090:80"
===================

Run container
===========
cd $env:docker4dotnet

docker-compose -f app/04/web.yml -f app/04/04-04/save-handler.yml up -d signup-save-handler

docker logs 04_signup-save-handler_1
===========

Browse metrics endpoint - http://localhost:8090/metrics

Metrics to .NET Core apps:
The Prometheus client library can be integrated with the ASP.NET Core processing pipeline. It records HTTP request processing times for every controller.

It's configured in the reference data API using the familiar ASP.NET services pattern
Startup - https://github.com/sixeyed/docker4.net/blob/master/src/SignUp.Api.ReferenceData/Startup.cs
Metrics exposed here - http://localhost:8082/metrics
We can build up dashboards using information provided by the metric endpoint.

Metrics to .NET Framework apps:
The Prometheus client also works for ASP.NET Framework apps - it can be integrated to collect HTTP processing metrics. It will break metrics down to controller level for MVC apps, but for WebForms apps you'll only see the high-level details.

The web app configures the client library in Global.asax.cs using an HTTP module. The metrics endpoint is exposed in Metrics.ashx.cs. It's more work than .NET Core apps, but it gets you a similar set of metrics.
Global.asax - https://github.com/sixeyed/docker4.net/blob/master/src/SignUp.Web/Global.asax.cs
Metrics exposed here - https://github.com/sixeyed/docker4.net/blob/master/src/SignUp.Web/Metrics.ashx.cs
