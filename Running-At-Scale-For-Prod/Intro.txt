# Intro
Ideally, on PROD, we would have mixed bag of servers(Windows/Liunux), all of them would have Docker installed.
And they'd be all connected together using Orchestrator.
3 popular choice:
    1. K8
    2. Docker Swarm(Docker - CNCF)
    3. Nomad (HashiCorp)

All of them support:
    1. Hybrid OS(Both Windows and Linux)
    2. Container Runtime(Docker)
    3. Orchestrator(The tool manages the containers for us)

Difference between running Docker locally vs with Orchestrator on PROD is:
With Local:
    We'd be talking directly with Docker API to create/maintain containers for us.

With Orchestrator:
    We'd be talking to the Orchestration tool's API.
    Instead of telling it to create containers, we're going to pass a model of our application defined in YAML and we'd send it to API using command line(Similar to Docker compose)
    Orchestrator will then create containers for us and distribute them across servers in cluster.
    It will watch those containers. 
    If there's a problem with one of our container, it can be restarted ot replaced
    If there's a problem with one of the servers(If it goes offline), orchestrator starts new containers to replace any that got lost on server that's no longer there.

    Cluster has own API that we talk to. we don't connect to individual servers and orchestrator follows same desired state approach.

    So, in a nutshell, we model out the application in a YAML file and then send it out to orchestrator. It then works out what it needs to do to go from CURRENT STATE to DESIRED STATE.
    The Orchestrator also takes care of networking between containers even if they're running on different servers/different OS.
    It also takes care of Ingress(i.e. External traffic coming into cluster like HTTP request)
    With application model, we need configure routing of incoming requests and cluster will take care of directing traffic to correct containers on whichever server they're running on.
    So, in a nutshell, application model will contain:
        Compute Layer - Servers on which containers will run
        Networking Layer - External/internal communication
            Internal communication
            External Routing
        Storage Layer
            Volume mounts
            Persistent storage
    Cluster maintains its own database that stores all application models and provides storage utilities for our containers to use[Equivalent to Volume mounts]
    WE can have HDD/SDD to store State of our containers and make it accessible within the cluster
    This includes configuration files that are loaded inside the application components
    Also secrets for storing sensitive information




