Docker Containers are very light-weight.

Docker creates the container environment where your applications run.
Every container has an IP address managed by Docker and containers connected to the same Docker network can communicate with standard network protocols.
You'll package your application images with a default set of configuration, including connection details for other components.

Enhancement of v3 DockerFile(Worked in previous file)
DockerFile
------------
# escape=`
FROM mcr.microsoft.com/dotnet/framework/sdk:4.8 AS builder

WORKDIR C:\src
COPY src\SignUp.Web.sln .
COPY src\SignUp.Core\SignUp.Core.csproj .\SignUp.Core\
COPY src\SignUp.Entities\SignUp.Entities.csproj .\SignUp.Entities\
COPY src\SignUp.Messaging\SignUp.Messaging.csproj .\SignUp.Messaging\
COPY src\SignUp.Model\SignUp.Model.csproj .\SignUp.Model\
COPY src\SignUp.Web\SignUp.Web.csproj .\SignUp.Web\
COPY src\SignUp.Model\packages.config .\SignUp.Model\
COPY src\SignUp.Web\packages.config .\SignUp.Web\
RUN nuget restore SignUp.Web.sln

COPY src C:\src
RUN msbuild SignUp.Web\SignUp.Web.csproj /p:OutputPath=c:\out /p:Configuration=Release

# app image
FROM mcr.microsoft.com/dotnet/framework/aspnet:4.8
SHELL ["powershell", "-Command", "$ErrorActionPreference = 'Stop';"]

ENV APP_ROOT=C:\web-app

WORKDIR ${APP_ROOT}
RUN New-WebApplication -Name 'app' -Site 'Default Web Site' -PhysicalPath $env:APP_ROOT

COPY --from=builder C:\out\_PublishedWebsites\SignUp.Web ${APP_ROOT} 
COPY docker\02-04-multi-container-apps\signup-web\connectionStrings.config ${APP_ROOT}
------------
Explanation:
Earlier, the connection to SQL server was happening through servername/container Name
Meaning, container name was MATCHING the DB connection string present in web.config.
It's not ideal for container name to match the configuration 

OUTPUT - With copy command, if we're trying to copy something that already exists in the target location, it'll OVERWRITE IT.

Next, we're going to run both web app and DB in a separate network. Since its not recommended to run apps in default nat network

Create a custom network for the app
The default nat network is fine for development, but for more control you can create dedicated networks for your apps.

Command to create a new network and check its details:
------------------
docker network ls
docker network create --driver nat section-02
docker network inspect section-02
------------------
Each network has it's own gateway address
So, Gateway acts as a Router

Command to spin up SQL Server within newly created network
--------------------------------
docker run -d --name signup-db `
  --env sa_password=docker4.net! `
  --network section-02 `
  docker4dotnet/sql-server:2017
--------------------------------

Command to inspect container
-------------------------------
docker container inspect signup-db
-------------------------------
Here we can confirm it's connected to network namely section-02

Connect an app container to the database
Containers in the same network can communicate using the container name as the machine name.

Docker has a DNS server built in which returns the container IP address for lookups.

Run a new app container, attached to the new network:

Command to run web app container in network section-02
---------------------------------------------
docker run -d -p 8081:80 --name signup-web `
  --network section-02 `
  signup-web:02-04
---------------------------------------------
Command to inspect containers present in network section-02
--------------------------------
docker network inspect section-02
--------------------------------
We'd see DB and WebApp both sitting in same network

Command to verify both containers are able to ping to each other
------------------------------------------------------------
docker exec -it signup-web powershell ping signup-db
----------------------------------------------------------------

Command to verify container deployed in default nat network is not able to ping to DB hosted on section-02 network
-------------------------------------------
docker exec -it web powershell ping signup-db
------------------------------------------------------------
Containers can only connect if they're attached to the same network

Docker makes it simple to build distributed apps where each component runs in a small, lightweight container.
You can add features by deploying new containers without needing to change and regression test a big monolithic app.
Containers are isolated so you can use different technology stacks for different components.